

数据库设计的三大范式：
第一范式：数据库表中的所有字段值都是不可分解的原子值。（确保每列保持原子性）
第二范式：数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关。（确保表中的每列都是和主键相关）
第三范式：数据库表中的每一列数据都是和主键直接相关，而不能间接相关。（确保每列都和主键列直接相关，而不是间接相关）


给表添加主键列
alter table bigdatastandarddata.citycorre add COLUMN id INT NOT NULL AUTO_INCREMENT PRIMARY KEY first;

创建时设置外键
FOREIGN KEY (字段名) REFERENCES 表名(字段名)
添加外键
alter table 外键表名 add constraint 约束名称 foreign key（外键字段）  references 主键表名(约束列名) 

增
insert into table_name(字段1，字段2) values(值1，值2)

删
delete from table_name where 字段 = 值

改
update table_name set 字段 = ? where 条件

查
select * from table_name
查唯一
select distinct 字段 from table_name


排序order by(升序)
select * from talbe_name order by 字段

排序order by(降序)
select * from table_name order by 字段 desc

AND OR 使用
SELECT * FROM Persons WHERE FirstName='Thomas' AND LastName='Carter'
SELECT * FROM Persons WHERE firstname='Thomas' OR lastname='Carter'
SELECT * FROM Persons WHERE (FirstName='Thomas' OR FirstName='William') AND LastName='Carter'

TOP (用于分页)
SQL Server:
SELECT TOP number|percent column_name(s) FROM table_name
MySQL:
select * from table_name LIMIT n , m 
Oracle:
SELECT * FROM (SELECT A.*, ROWNUM RN FROM (SELECT * FROM TABLE_NAME) A  WHERE ROWNUM <= 40) WHERE RN >= 21  

LIKE(条件查询)
select * from users where realName like 'N%'     (查询满足字段数据由N开头的数据)
select * from users where realName like '%G'	 (查询满足字段数据由G结尾的数据)
select * from users where realName like '%lond%' (查询满足字段数据中有lond的数据)
select * from users where realName like 'A_M'	 (查询满足字段数据A(缺少一个字符)M的数据)
select * from users where realName like '[ALN]%' (查询满足字段数据由A或L或N开头的数据)
select * from users where realName like '[!ALN]%'(查询满足字段数据不由A或L或N开头的数据)

IN(条件查询)
select * from users where realName IN ('value1','value2') (查询满足字段数据为这两个值的数据)

BETWEEN(介于两个值之间)
select * from users where realName 



左连接(顾左不顾右)
SELECT * from grid LEFT JOIN links ON grid.ID = links.grid_id

右连接(顾右不顾左)
SELECT * from grid RIGHT JOIN links ON grid.ID = links.grid_id LIMIT 0 , 20

内连接(两个都不顾)
SELECT * from grid INNER JOIN links ON grid.ID = links.grid_id LIMIT 0 , 20

完全链接(两个都兼顾)
SELECT * from grid FULL JOIN links ON grid.ID = links.grid_id LIMIT 0 , 20



多表联查加速查询
http://blog.csdn.net/xlgen157387/article/details/44156679
快速方式：
SELECT
	link
FROM
	links l
WHERE
	l.grid_id = (
		SELECT
			g.ID
		FROM
			grid g
		WHERE
			g.NAMECN = '清华大学'
	)

慢速方式：
SELECT
	link
FROM
	links
LEFT JOIN grid ON links.grid_id = grid.ID
WHERE
	grid.NAMECN = '清华大学'


行转列
SELECT
	Date/* 这个是一个字段名 */,
	MAX(
		CASE Names/* 这个是一个字段名 */
		WHEN '小说'/*这个是需要转列的字段数据*/ THEN
			Scount/* 这个是一个字段名 */
		ELSE
			0
		END
	) 小说,
	MAX(
		CASE Names
		WHEN '微信' THEN
			Scount
		ELSE
			0
		END
	) 微信
FROM
	TabName
GROUP BY
	Date;


什么是数据的隔离级别
	概述：在一个典型的应用中，并发是不可避免的，多个事务并发运行，
操作同一个数据来完成任务。并发可能会导致一下问题：

* 脏读(Dirtyread)：
脏读发生在一个事务读取了另外一个事务的改写但是还未提交的数据时。如果这些
改变在稍后被回滚，那么之前的事务读取到的数据就是无效的。
* 不可重复读(Nonrepratable read):
不可重复读发生在一个事务执行相同的查询两次或两次以上，但每一次的查询结果不同是。这通常是由于另外一个并发的事务在两次查询之间更新了数据。
* 幻读
幻读是一个事务读取几行记录后，另一个事务插入了一些记录，幻读就发生了。
在后来的查询中第一个事务就会发现有一些原来没有的额外的记录。不可重复读和幻读的差异：一个是更新操作，一个是插入操作

## 四个不同的事务隔离级别：
* ISOLATION_DEFAULT 这是一个 PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.另外几个与JDBC的隔离级别相对应
* ISOLATION_READ_UNCOMMITTED这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。
* ISOLATION_READ_COMMITTED 保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。
* ISOLATION_REPEATABLE_READ 这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了避免下面的情况产生(不可重复读)

## 七种事务传播行为：
* 	PROPAGATION_REQUIRED 如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务;
* 	PROPAGATION_SUPPORTS 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行;
*	PROPAGATION_MANDATORY 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异;
*	PROPAGATION_REQUIRES_NEW 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起;
*	PROPAGATION_NOT_SUPPORTED总是非事务地执行，并挂起任何存在的事务;
* 	PROPAGATION_NEVER总是非事务地执行，如果存在一个活动事务，则抛出异常;
* 	PROPAGATION_NESTED如果一个活动的事务存在，则运行在一个嵌套的事务中. 如果没有活动事务, 则按 TransactionDefinition.PROPAGATION_REQUIRED 属性执行;

## 声明式事务管理有两种方式：
* 基于XML配置文件的方式。
* 基于@Transactional注解，将事务规则应用到业务逻辑层中。


